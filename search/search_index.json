{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"practica1/","title":"Configuraci\u00f3n de Infraestructura con Ansible","text":"<p>Este repositorio contiene varios playbooks de Ansible para configurar un entorno de WordPress con balanceo de carga, NFS y HTTPS.</p>"},{"location":"practica1/#playbooks-incluidos","title":"Playbooks Incluidos","text":""},{"location":"practica1/#1-configuracion-de-la-base-de-datos","title":"1. Configuraci\u00f3n de la Base de Datos","text":"<pre><code>- name: Playbook para configurar HTTPS\n  hosts: backend_ip\n  become: yes\n\n  vars_files:\n    - ../vars/variables.yml\n\n  tasks:\n    - name: Quitamos la base de datos\n      mysql_db:\n        name: \"{{ wordpress.db.name }}\"\n        state: absent\n        login_user: root\n        login_unix_socket: /var/run/mysqld/mysqld.sock\n\n    - name: Creamos la base de datos\n      mysql_db:\n        name: \"{{ wordpress.db.name }}\"\n          state: present\n        login_user: root\n        login_unix_socket: /var/run/mysqld/mysqld.sock\n\n    - name: Quitamos el usuario si esiste\n      mysql_user:\n        name: \"{{ wordpress.db.user }}\"\n        host: \"{{ FRONTEND_NETWORK }}\"\n        state: absent\n        login_user: root\n        login_unix_socket: /var/run/mysqld/mysqld.sock\n\n    - name: Creamos el usuario\n      mysql_user:\n        name: \"{{ wordpress.db.user }}\"\n        password: \"{{ wordpress.db.password }}\"\n        host: \"{{ FRONTEND_NETWORK }}\"\n        priv: \"{{ wordpress.db.name }}.*:ALL\"\n        state: present\n        login_user: root\n        login_unix_socket: /var/run/mysqld/mysqld.sock\n</code></pre>"},{"location":"practica1/#2-configuracion-de-wordpress","title":"2. Configuraci\u00f3n de WordPress","text":"<pre><code>- name: Configuracion de wordpress\n  hosts: frontend\n  become: yes\n\n  vars_files:\n    - ../vars/variables.yml\n\n  tasks:\n    - name: Quitamos el wp-cli\n      file:\n        path: \"/tmp/wp-cli.phar\"\n        state: absent\n\n    - name: Descargamos el wp-cli\n      get_url:\n        url: \"https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar\"\n        dest: \"/tmp/wp-cli.phar\"\n        mode: '0755'\n\n    - name: movemos el wp-cli a la carpeta wp\n      command: mv /tmp/wp-cli.phar /usr/local/bin/wp\n      args:\n        creates: /usr/local/bin/wp\n    - name: Creamos el directorio de wordpress\n      file:\n        path: \"{{ wordpress.directory }}\"\n        state: directory\n        owner: www-data\n        group: www-data\n        mode: '0755'\n\n    - name: Descargamos wordpress\n      command: wp core download --locale=es_ES --path={{ wordpress.directory }} --allow-root\n\n    - name: Creamos el archivo de configuracion\n      command: wp config create --dbname={{ wordpress.db.name }} --dbuser={{ wordpress.db.user }} --dbpass={{ wordpress.db.password }} --dbhost={{ mysql.backend_ip1 }} --path={{ wordpress.directory }} --allow-root\n\n    - name: Install WordPress\n      command: wp core install --url={{ certbot.domain }} --title=\"{{ wordpress.titulo }}\" --admin_user={{ wordpress.db.user }} --admin_password={{ wordpress.db.password }} --admin_email={{ certbot.email }} --path={{ wordpress.directory }} --allow-root\n\n    - name: Cambiamos el due\u00f1o a www-data\n      file:\n        path: \"{{ wordpress.directory }}\"\n        state: directory\n        recurse: yes\n        owner: www-data\n        group: www-data\n    - name: Instalamos los temas\n      command: wp theme install mindscape --activate --path={{ wordpress.directory }} --allow-root\n\n    - name: Configuramos los linkspermanentes\n      command: wp rewrite structure '/%postname%/' --path={{ wordpress.directory }} --allow-root\n\n    - name: Instalamos los plugins de seguridad\n      command: wp plugin install wps-hide-login --activate --path={{ wordpress.directory }} --allow-root\n\n    - name: Ponemos la url privada\n      command: wp option update whl_page \"{{ wordpress.hideurl }}\" --path={{ wordpress.directory }} --allow-root\n\n    - name: Copiamos el htaccess\n      copy:\n        src: \"../htaccess/.htaccess\"\n        dest: \"{{ wordpress.directory }}/.htaccess\"\n        owner: www-data\n        group: www-data\n        mode: '0644'\n\n    - name: Habilitamos https en el directorio\n      lineinfile:\n        path: \"{{ wordpress.directory }}/wp-config.php\"\n        insertafter: \"COLLATE\"\n        line: \"$_SERVER['HTTPS'] = 'on';\"\n        state: present\n        - name: Cambiar el due\u00f1o a www-data de nuevo\n      file:\n        path: \"{{ wordpress.directory }}\"\n        state: directory\n        recurse: yes\n        owner: www-data\n        group: www-data\n</code></pre>"},{"location":"practica1/#3-configuracion-del-servidor-de-base-de-datos","title":"3. Configuraci\u00f3n del Servidor de Base de Datos","text":"<pre><code>- name: Playbook para configurar HTTPS\n  hosts: backend_ip\n  become: yes\n\n  vars_files:\n    - ../vars/variables.yml\n\n  tasks:\n    - name: Actualizamos los repositorios\n      apt:\n        update_cache: yes\n\n    - name: Instalamos mysql-server\n      apt:\n        name: mysql-server\n        state: present\n\n    - name: Instalamos el modulo de python para mysql-server\n      apt:\n        name: python3-pymysql\n        state: present\n\n    - name: Configuramos el /etc/mysql\n      replace:\n        path: /etc/mysql/mysql.conf.d/mysqld.cnf\n        regexp: 127.0.0.1\n        replace: 0.0.0.0\n\n    - name: Reseteamos mysql-server\n      service:\n        name: mysql\n        state: restarted\n</code></pre>"},{"location":"practica1/#4-configuracion-del-frontend","title":"4. Configuraci\u00f3n del Frontend","text":"<pre><code>- name: Configuracion de frontend\n  hosts: frontend\n  become: yes\n\n  vars_files:\n    - ../vars/variables.yml\n\n  tasks:\n    - name: Actualizamos los repositorios\n      apt:\n        update_cache: yes\n\n    - name: Actualizamos el ubuntu\n      apt:\n        upgrade: yes\n\n    - name: Instalamos apache2 \n      apt:\n        name: apache2\n        state: present\n\n    - name:\n      apache2_module:\n        name: rewrite\n        state: present\n\n    - name: Copiamos el 000-default dentro de apache2\n      copy:\n        src:  ../templates/000-default.conf\n        dest: /etc/apache2/sites-available\n\n    - name: Instalamos los modulos de php\n      apt:\n        name:\n          - php \n          - libapache2-mod-php\n          - php-mysql\n        state: present\n\n    - name:\n      service:\n        name: apache2\n        state: restarted\n\n    - name:\n      file:\n        path: /var/www/html\n        mode: 755\n        owner: www-data\n        group: www-data\n        recurse: yes\n</code></pre>"},{"location":"practica1/#5-configuracion-del-letsencrypt","title":"5. Configuraci\u00f3n del letsencrypt","text":"<pre><code>- name: Configuramos a donde ira la configuracion.\n  hosts: loadbalancer_ip\n  become: yes\n\n  vars_files:\n    - ../vars/variables.yml\n\n  tasks:\n    - name: Desinstalar instalaciones previas de Certbot\n      apt:\n        name: certbot\n        state: absent\n\n    - name: Instalar Certbot con snap\n      snap:\n        name: certbot\n        classic: yes\n        state: present\n\n    - name: Solicitamos el certificado\n      command:\n        certbot --nginx \\\n        -m {{ certbot.email }} \\\n        --agree-tos \\\n        --no-eff-email \\\n        --non-interactive \\\n        -d {{ certbot.domain }}\n</code></pre>"},{"location":"practica1/#6-configuracion-del-balanceador-de-carga","title":"6. Configuraci\u00f3n del Balanceador de Carga","text":"<pre><code>--- \n- name: Configuracion de loadbalancer\n  hosts: loadbalancer_ip\n  become: yes\n\n  vars_files:\n    - ../vars/variables.yml\n\n  tasks:\n    - name: Actualizamos los repositorios\n      apt:\n        update_cache: yes\n\n    - name: Actualizamos el ubuntu\n      apt:\n        upgrade: yes\n\n    - name: Instalamos el nginx\n      apt:\n        name: nginx\n        state: present\n\n    - name: Quitamos el sitio por /etc/nginx/sites-enabled/default\n      file:\n        path: /etc/nginx/sites-enabled/default\n        state: absent\n\n    - name: Copiamos el loadbalancer en la pagina\n      copy:\n        src: ../templates/load-balancer.conf\n        dest: /etc/nginx/sites-available/load-balancer.conf\n        mode: '755'\n\n    - name: Remplazamos la ip del frontend por la del mysql\n      replace:\n        path: /etc/nginx/sites-available/load-balancer.conf\n        regexp: \"IP_FRONTEND_1\"\n        replace: \"{{ mysql.frontend_ip }}\"\n\n    - name: Remplazamos la ip del frontend por la del mysql\n      replace:\n        path: /etc/nginx/sites-available/load-balancer.conf\n        regexp: \"IP_FRONTEND_2\"\n        replace: \"{{ mysql.frontend_ip2 }}\"\n\n    - name: Remplazamos la ip del frontend por la del mysql\n      replace:\n        path: /etc/nginx/sites-available/load-balancer.conf\n        regexp: \"LE_DOMAIN\"\n        replace: \"{{ certbot.domain }}\"\n\n    - name:\n      file:\n        src: /etc/nginx/sites-available/load-balancer.conf\n        dest: /etc/nginx/sites-enabled/load-balancer.conf\n        state: link\n\n    - name: Recargamos Nginx \n      systemd:\n        name: nginx\n        state: restarted\n</code></pre>"},{"location":"practica1/#7-configuracion-de-nfs-client","title":"7. Configuraci\u00f3n de NFS client","text":"<pre><code>- name: Configuracion de nfs server\n  hosts: frontend\n  become: yes\n\n  vars_files:\n    - ../vars/variables.yml\n\n  tasks:\n    - name: Install NFS client package\n      apt:\n        name: nfs-common\n        state: present\n        update_cache: yes\n\n    - name: Add NFS mount to /etc/fstab\n      lineinfile:\n        path: /etc/fstab\n        line: \"{{ nfs.NFS_SERVER_IP }}:/var/www/html /var/www/html nfs auto,nofail,noatime,nolock,intr,tcp,actimeo=1800 0 0\"\n        insertafter: \"LABEL=UEFI\"\n\n    - name: reiniciamos systemd daemon\n      systemd:\n        daemon_reload: yes\n\n    - name: montar el NFS\n      mount:\n        path: /var/www/html\n        src: \"{{ nfs.NFS_SERVER_IP }}:/var/www/html\"\n        fstype: nfs\n        state: mounted\n</code></pre>"},{"location":"practica1/#8-configuracion-de-nfs-server","title":"8. Configuraci\u00f3n de NFS server","text":"<pre><code>- name: Configuracion de nfs server\n  hosts: nfs_ip\n  become: yes\n\n  vars_files:\n    - ../vars/variables.yml\n\n  tasks:\n\n    - name: Instalamos nfs server\n      apt:\n        name: nfs-kernel-server\n        state: present\n\n    - name: Creamos el directorio html\n      file:\n        path: /var/www/html\n        state: directory\n        owner: nobody\n        group: nogroup\n        mode: 0777\n\n    - name: Copiamos el archivo nfs\n      copy:\n        src: ../nfs/exports\n        dest: /etc/exports\n        owner: root\n        group: root\n        mode: 0644\n\n    - name: actualizamos el archivo exports\n      replace:\n        path: /etc/exports\n        regexp: 'FRONTEND_NETWORK'\n        replace: \"{{ nfs.FRONTEND_NETWORK }}\"\n\n    - name: Reiniciamos el NFS\n      service:\n        name: nfs-kernel-server\n        state: restarted\n</code></pre>"},{"location":"practica1/#variables","title":"Variables","text":"<p>Las variables se encuentran en <code>/vars/variables.yml</code> y contienen la configuraci\u00f3n personalizadas para la instalaci\u00f3n.  </p>"},{"location":"practica2/","title":"Infraestructura en AWS con Terraform","text":""},{"location":"practica2/#descripcion","title":"Descripci\u00f3n","text":"<p>Este proyecto configura la infraestructura en AWS utilizando Terraform. Incluye la creaci\u00f3n de grupos de seguridad, reglas de seguridad y m\u00faltiples instancias EC2 para un entorno NFS, frontend, backend y un balanceador de carga.</p>"},{"location":"practica2/#configuracion-de-terraform","title":"Configuraci\u00f3n de Terraform","text":""},{"location":"practica2/#configuracion-del-proveedor-aws","title":"Configuraci\u00f3n del proveedor AWS","text":"<pre><code>provider \"aws\" {\n  region = var.region\n}\n</code></pre>"},{"location":"practica2/#creacion-de-grupos-de-seguridad","title":"Creaci\u00f3n de Grupos de Seguridad","text":"<pre><code>resource \"aws_security_group\" \"sg_NFS\" {\n  name        = var.sg_name_nfs\n  description = var.sg_description\n}\n\nresource \"aws_security_group\" \"sg_backend\" {\n  name        = var.sg_name_backend\n  description = var.sg_description\n}\n\nresource \"aws_security_group\" \"sg_frontend\" {\n  name        = var.sg_name_frontend\n  description = var.sg_description\n}\n\nresource \"aws_security_group\" \"sg_loadbalancer\" {\n  name        = var.sg_name_loadbalancer\n  description = var.sg_description\n}\n</code></pre>"},{"location":"practica2/#reglas-de-seguridad","title":"Reglas de Seguridad","text":""},{"location":"practica2/#backend","title":"Backend","text":"<pre><code>resource \"aws_security_group_rule\" \"ingress_backend\" {\n  security_group_id = aws_security_group.sg_backend.id\n  type              = \"ingress\"\n\n  count       = length(var.allowed_ingress_ports_backend)\n  from_port   = var.allowed_ingress_ports_backend[count.index]\n  to_port     = var.allowed_ingress_ports_backend[count.index]\n  protocol    = \"tcp\"\n  cidr_blocks = [\"0.0.0.0/0\"]\n}\n\nresource \"aws_security_group_rule\" \"egress_backend\" {\n  security_group_id = aws_security_group.sg_backend.id\n  type              = \"egress\"\n  from_port   = 0\n  to_port     = 0\n  protocol    = \"-1\"\n  cidr_blocks = [\"0.0.0.0/0\"]\n}\n</code></pre>"},{"location":"practica2/#frontend","title":"Frontend","text":"<pre><code>resource \"aws_security_group_rule\" \"ingress_frontend\" {\n  security_group_id = aws_security_group.sg_frontend.id\n  type              = \"ingress\"\n  count       = length(var.allowed_ingress_ports)\n  from_port   = var.allowed_ingress_ports[count.index]\n  to_port     = var.allowed_ingress_ports[count.index]\n  protocol    = \"tcp\"\n  cidr_blocks = [\"0.0.0.0/0\"]\n}\n\nresource \"aws_security_group_rule\" \"egress_frontend\" {\n  security_group_id = aws_security_group.sg_frontend.id\n  type              = \"egress\"\n  from_port   = 0\n  to_port     = 0\n  protocol    = \"-1\"\n  cidr_blocks = [\"0.0.0.0/0\"]\n}\n</code></pre>"},{"location":"practica2/#loadbalancer","title":"LoadBalancer","text":"<pre><code>resource \"aws_security_group_rule\" \"ingress_loadbalancer\" {\n  security_group_id = aws_security_group.sg_loadbalancer.id\n  type              = \"ingress\"\n  from_port   = 80\n  to_port     = 80\n  protocol    = \"tcp\"\n  cidr_blocks = [\"0.0.0.0/0\"]\n}\n\nresource \"aws_security_group_rule\" \"egress_loadbalancer\" {\n  security_group_id = aws_security_group.sg_loadbalancer.id\n  type              = \"egress\"\n  from_port   = 0\n  to_port     = 0\n  protocol    = \"-1\"\n  cidr_blocks = [\"0.0.0.0/0\"]\n}\n</code></pre>"},{"location":"practica2/#nfs","title":"NFS","text":"<pre><code>resource \"aws_security_group_rule\" \"ingress_nfs\" {\n  security_group_id = aws_security_group.sg_NFS.id\n  type              = \"ingress\"\n  count       = length(var.allowed_ingress_ports_nfs)\n  from_port   = var.allowed_ingress_ports_nfs[count.index]\n  to_port     = var.allowed_ingress_ports_nfs[count.index]\n  protocol    = \"tcp\"\n  cidr_blocks = [\"0.0.0.0/0\"]\n}\n\nresource \"aws_security_group_rule\" \"egress_nfs\" {\n  security_group_id = aws_security_group.sg_NFS.id\n  type              = \"egress\"\n  from_port   = 0\n  to_port     = 0\n  protocol    = \"-1\"\n  cidr_blocks = [\"0.0.0.0/0\"]\n}\n</code></pre>"},{"location":"practica2/#creacion-de-instancias-ec2","title":"Creaci\u00f3n de Instancias EC2","text":"<pre><code>resource \"aws_instance\" \"instancia_nfs\" {\n  ami             = var.ami_id\n  instance_type   = var.instance_type\n  key_name        = var.key_name\n  security_groups = [aws_security_group.sg_NFS.name]\n  tags = { Name = var.instance_name_nfs }\n}\n\nresource \"aws_instance\" \"instancia_frontend\" {\n  ami             = var.ami_id\n  instance_type   = var.instance_type\n  key_name        = var.key_name\n  security_groups = [aws_security_group.sg_frontend.name]\n  tags = { Name = var.instance_name_frontend }\n}\n\nresource \"aws_instance\" \"instancia_frontend1\" {\n  ami             = var.ami_id\n  instance_type   = var.instance_type\n  key_name        = var.key_name\n  security_groups = [aws_security_group.sg_frontend.name]\n  tags = { Name = var.instance_name_frontend1 }\n}\n\nresource \"aws_instance\" \"instancia_backend\" {\n  ami             = var.ami_id\n  instance_type   = var.instance_type\n  key_name        = var.key_name\n  security_groups = [aws_security_group.sg_backend.name]\n  tags = { Name = var.instance_name_backend }\n}\n\nresource \"aws_instance\" \"instancia_loadbalancer\" {\n  ami             = var.ami_id\n  instance_type   = var.instance_type\n  key_name        = var.key_name\n  security_groups = [aws_security_group.sg_loadbalancer.name]\n  tags = { Name = var.instance_name_loadbalancer }\n}\n</code></pre>"},{"location":"practica2/#configuracion-de-ip-elastica","title":"Configuraci\u00f3n de IP El\u00e1stica","text":"<pre><code>resource \"aws_eip\" \"ip_elastica\" {\n  instance = aws_instance.instancia_loadbalancer.id\n}\n\noutput \"elastic_ip\" {\n  value = aws_eip.ip_elastica.public_ip\n}\n</code></pre>"}]}